package 排序;

import org.omg.CORBA.PUBLIC_MEMBER;

import java.util.Arrays;

public class Sorts {
    /*public static void insertSortV1(int[] array) {
        for (int i = 0; i < array.length - 1 ; i++) {
            int key = array[i + 1];
            int j;
            for(j = i;j >= 0;j --) {
                if(key >= array[j]) {
                    break;
                }
            }
            for (int k = i;k > j;k --) {
                array[k+1] = array[k];
            }
            array[j + 1] = key;
        }
    }*/


    /*public static void insertSortV1(int[] array) {
        for (int i = 1; i < array.length ; i++) {
            int key = array[i];
            int j;
            for(j = i - 1;j >= 0;j --) {
                if(array[j] <= key) {
                    break;
                }
            }
            for(int k = i - 1;k > j;k --) {
                array[k + 1] = array[k];
            }
            array[j + 1] = key;
        }
    }*/

   /* public static void insertSortV1(int[] array) {
        for (int i = 0; i < array.length -1 ; i++) {
            int key = array[i + 1];
            int j;
            for (j = i;j >= 0;j --) {
                if(array[j] <= key) {
                    break;
                }else {
                    array[j + 1] = array[j];
                }
            }
            array[j + 1] = key;
        }
    }*/

    /*private static void insertSortWithGap(int[] array, int gap) {
        for (int i = 0;i < array.length - gap;i ++) {
            int key = array[i + gap];
            int j;
            for (j = i;j >= 0;j -= gap) {
                if(array[j] <= key) {
                    break;
                }else {
                    array[j + gap] = array[j];
                }
            }
            array[j + gap] = key;
        }
    }

    public static void shellSort(int[] array) {
        int gap = array.length;
        while (true) {
            gap /= 3 + 1;
            insertSortWithGap(array,gap);
            if(gap == 1){
                return;
            }
        }
    }*/
/*

    public static void shellSort(int[] array) {
        int gap = array.length;
        while (true) {
            gap /= 3 + 1;
            insertSortGap(array,gap);
            if (gap == 1) {
                return;
            }
        }
    }

    private static void insertSortGap(int[] array, int gap) {
        for (int i = 0; i < array.length - gap ; i++) {
            int key = array[i + 1];
            int j;
            for (j = i; j >= 0 ; j-= gap) {
                if(array[j] <= key) {
                    break;
                }else {
                    array[j + gap] = array[j];
                }
            }
            array[j + gap] = key;
        }
    }
*/

    /*public static void insertSortV1(int[] array) {
        for (int i = 1; i < array.length - 1 ; i++) {
            int key = array[i];

            int j;
            for ( j = i - 1; j >= 0 ; j--) {
                if(array[j] <= key) {
                    break;
                }else {
                    array[j+1] = array[j];
                }
            }
            array[j+1] = key;

        }
    }*/

    /*public static void insertSortV1(int[] array) {
        int gap = array.length;
        while (true) {
            gap = gap / 3 + 1;
            insertSort(array,gap);
            if(gap == 1) {
                break;
            }
        }
    }

    private static void insertSort(int[] array, int gap) {
        for (int i = 0; i < array.length - gap ; i++) {
            int key = array[i + 1];

            int j;
            for ( j = i; j >= 0 ; j--) {
                if(array[i] <= key) {
                    break;
                }else {
                    array[j + 1] = array[j];
                }
            }
            array[j + 1] = key;
        }
    }*/

    /*public static void selectSort(int[] array) {
        for (int i = 0; i < array.length - 1 ; i++) {
            int max = 0;

            for (int j = 1; j < array.length - i ; j++) {
                if(array[max] < array[j]) {
                    max = j;
                }
            }
            swap(array,max,array.length - i - 1);
        }
    }*/

    /*public static void selectSort(int[] array) {
        for (int i = 0; i < array.length - 1 ; i++) {
            int max = 0;
            for (int j = 1; j < array.length - i  ; j++) {
                if(array[j] > array[max]) {
                    max = j;
                }
            }
            swap(array,max,array.length - i - 1);
        }
    }*/

    private static void swap(int[] array, int max, int j) {
        int t = array[max];
        array[max] = array[j];
        array[j] = t;
    }





    private static void createHeap(int[] array, int length) {
        for (int i = (length - 2) / 2; i >= 0 ; i--) {
            heapity(array,length,i);
        }
    }
    private static void heapSort(int[] array) {
        createHeap(array,array.length);
        for (int i = 0; i < array.length - 1 ; i++) {
            swap(array,0,array.length - i - 1);
            heapity(array,array.length - i - 1,0);
        }
    }

    private static void heapity(int[] array, int size, int index) {
        while (true) {
            int left = 2 * index + 1;
            if(left >= size) {return;}
            int max = left;
            if(left + 1 < size) {
                if(array[left] < array[left + 1]) {
                    max = left + 1;
                }
            }
            if(array[max] > array[index]) {
                swap(array,index,max);
                index = max;
            }else  {
                return;
            }
        }
    }
    /*public static void heapSort(int[] array) {
        createHeap(array,array.length);
        for (int i = 0; i < array.length - 1 ; i++) {
            swap(array,0,array.length - 1 - i);
            heapify(array,array.length - i - 1,0);
        }
    }




    private static void createHeap(int[] array, int size) {
        for (int i = (size - 2) / 2; i >= 0 ; i--) {
            heapify(array,size,i);
        }
    }

    private static void heapify(int[] array, int size, int index) {
        while (true) {
            int left = 2 * index + 1;
            if(left >= size) {return;}
            int max = left;
            if(left + 1 < size) {
                if(array[left] < array[left + 1]) {
                    max = left + 1;
                }
            }
            if(array[max] <= array[index]){return;}
            swap(array,max,index);
            index = max;
        }
    }

    private static void swap(int[] array, int max, int i) {
        int t = array[max];
        array[max] = array[i];
        array[i] = t;
    }*/


    /*public static void insertSortV1(int[] array) {
        for (int i = 0;i < array.length - 1;i ++) { // 外层循环是统计总需要循环的次数
            int key = array[i + 1];
            int j;
            for ( j = i; j >= 0 ; j--) { // 内层循环主要是找到 key 要插入的位置
                if(array[j] >= key) {
                    array[j + 1] = array[j];
                }else {
                    break;
                }
            }
            array[j + 1] = key;
        }
    }*/




    /*public static void bubbleSort(int[] array) {
        for (int i = 0; i <  array.length - 1; i++) { // 排序的次数
            boolean sorted = true;
            for (int j = 0; j < array.length - i - 1; j++) { // 满足条件两两交换
                if(array[j] > array[j + 1]) {
                    swap(array,j,j + 1);
                    sorted = false;
                }
            }
            if(sorted == true) {
                break;
            }
        }
    }*/

/*    public static void bubbleSort(int[] array) {
        for (int i = 0; i < array.length - 1 ; i++) {
            boolean sorted = true;
            for (int j = 0; j < array.length - i - 1 ; j++) {
                if(array[j + 1] < array[j]) {
                    swap(array,j,j+1);
                    sorted = false;
                }
            }
            if(sorted == true) {
                break;
            }
        }
    }*/


    public static void quickSort(int[] array) {
        quickSortInternal(array,0,array.length - 1);
    }

    private static void quickSortInternal(int[] array, int left, int right) {
        if(left >= right) {
            return;
        }
        // 1、确定基准值，array[right] 作为基准值
        // 2、遍历，小的左，大的右
        int index = getIndex(array,left,right);
        quickSortInternal(array,left,index - 1);
        quickSortInternal(array,index + 1,right);
    }

    private static int getIndex(int[] array, int left, int right) {
        int less = left;
        int great = right;
        int pivot = array[less];

        while (less < great) {

            //由后向前找比他小的数，找到后挖出此数填到前一个坑中
            while (less < great && array[great] >= pivot) {
                great --;
            }

            if(less < great) {
                array[less] = array[great];
                less ++;
            }

            // 由前向后找比他大的数，找到了也挖出此数填到前一个坑中
            while (less < great && array[less] <= pivot) {
                less++;
            }

            if(less < great) {
                array[great] = array[less];
                great --;
            }
        }

        array[less] = pivot;
        return less;
    }

    public static void main(String[] args) {
        int[] array = {7,5,3,6,6,9};
//        insertSortV1(array);
//        selectSort(array);
//        shellSort(array);
//        heapSort(array);
//        bubbleSort(array);
        quickSort(array);
        System.out.println(Arrays.toString(array));
    }


}
