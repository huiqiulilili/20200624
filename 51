class pair {
    int x;
    int y;
    public pair(int x,int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) {
            return 0;
        }

        int row = grid.length;
        int col = grid[0].length;

        Queue<pair> q = new LinkedList<>();
        // 找到已经坏了的水果，入队
        for(int i = 0;i < row;i ++) {
            for(int j = 0;j < col;j ++) {
                if(grid[i][j] == 2) {
                    q.offer(new pair(i,j));
                }
            }
        } 

        int[][] next = {{1,0},{-1,0},{0,-1},{0,1}};
        int step = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            boolean flag = false;
            while(size-- != 0) {
                pair cur = q.poll();
                // 搜索新的位置
                for(int i = 0;i < 4;i ++) {
                    int nx = cur.x+next[i][0];
                    int ny = cur.y+next[i][1];
                    if(nx >= row || nx < 0 || ny >= col || ny < 0) {
                        continue;
                    } 
                    if(grid[nx][ny] == 1) {
                        flag = true;
                        grid[nx][ny] = 2;
                        q.offer(new pair(nx,ny));
                    }
                }
            }
            if(flag) {
                ++step;
            }
        }
        for(int i = 0;i < row;i++) {
            for(int j = 0;j < col ;j ++) {
                if(grid[i][j] == 1) {
                    return -1;
                }
            }
        }
        return step;
    }
}
