package 牛客;

    import java.util.ArrayList;
    import java.util.List;

public class Main8 {
/*

    // 快速排序
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        sc.nextLine();
        int[] array = new int[n];
        int k = sc.nextInt();
        for (int i = 0; i < n ; i++) {
            array[i] = sc.nextInt();
        }
        quickSort(array,0,n - 1);

        for (int i = 0; i < array.length ; i++) {
            if(i + 1 == k) {
                System.out.println(array[i]);
                return;
            }else {
                continue;
            }
        }
    }

    private static void quickSort(int[] array, int left, int right) {
        if(left >= right) {
            return;
        }

        int index =getIndex(array,left,right);
        quickSort(array,left,index - 1);
        quickSort(array,index + 1,right);
    }

    private static int getIndex(int[] array, int left, int right) {
        int less = left;
        int great = right;
        int pivot = array[less];

        while (less < great) {
            while (less < right && array[great] >= pivot) {
                great--;
            }

            if(less < great) {
                array[less] = array[great];
                less ++;
            }

            while (less < great && array[less] <= pivot) {
                less++;
            }
            if(less < great) {
                array[great] = array[less];
                great --;
            }
        }

        array[less] = pivot;
        return less;
    }

*/


    public static int findKth(int[] a, int n, int K) {
        // write code here
        quickSort(a, 0, n - 1);

        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < a.length; i++) {
            if (!list.contains(a[i])) {
                list.add(a[i]);
            } else {
                continue;
            }
        }

        if (K <= list.size()) {
            return a[list.size() - K];
        }
        return -1;
    }

    private static void quickSort(int[] a, int left, int right) {
        if(left >= right) {
            return;
        }
        int index = getIndex(a,left,right);
        quickSort(a,left,index - 1);
        quickSort(a,index + 1,right);

    }

    private static int getIndex(int[] a, int left, int right) {
        int less = left;
        int great = right;

        int pivot = a[less];

        while (less < great) {
            while (less < great && a[great] >= pivot) {
               great--;
            }
            if(less < great) {
                a[less] = a[great];
                less++;
            }

            while (less < great && a[less] <= pivot) {
                less ++;
            }
            if(less < great) {
                a[great] = a[less];
                great--;
            }
        }
        a[less] = pivot;
        return less;
    }

    public static void main(String[] args) {
        int[] array = {7,6,5,4,3,22,1};
        int n = 7;
        int K = 7;
        System.out.println(findKth(array,n,K));
    }
}
